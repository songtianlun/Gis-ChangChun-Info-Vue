{"version":3,"sources":["webpack:///src/pages/gis-information-map.vue","webpack:///./src/pages/gis-information-map.vue?d5fe","webpack:///./src/pages/gis-information-map.vue"],"names":["gis_information_map","name","data","heatmapLayer","map","baseLayers","overlays","layerControl","scenicmapmarkers","nation_2016_geology","nation_2016_woods","nature_2016","mounted","this","initmap","addscenicmap","addnation_2016_geology","addnation_2016_woods","addnation_2016","layercontrol","firstmessage","methods","Gaode","leaflet_src_default","a","tileLayer","chinaProvider","attribution","minZoom","Gaodimgem","Gaodimga","Gaodimage","layerGroup","OpenStreetMap","高德地图","高德影像","center","zoom","layers","control","scale","maxWidth","metric","imperial","addTo","_this","that","markerClusterGroup","$http","get","then","response","console","log","array","features","i","_loop","mgtitle","properties","名称","mgcontent","全称","省份","总面积","游览面","游人量","境外游","固定资","国家拨","景区资","景区资_","经营收","经营支","维护支","门票收","marker","LatLng","geometry","coordinates","title","on","e","openmessage","addLayer","_loop2","主要地","主要人","time","批次","序号","addOverlay","_loop3","name_short","area_ha","Province","manager","county","nation_2016","_loop4","area","apartment","code","object","type","2017国家级风景名胜区","content","_this2","$confirm","confirmButtonText","cancelButtonText","dangerouslyUseHTMLString","$message","message","catch","$router","push","path","pages_gis_information_map","render","_h","$createElement","_self","_c","staticStyle","margin","width","height","z-index","attrs","id","staticRenderFns","Component","__webpack_require__","normalizeComponent","ssrContext","__webpack_exports__"],"mappings":"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","file":"static/js/21.af87bd2ea58ab2dffd01.js","sourcesContent":["<template>\n  <div id=\"map\" style=\"margin:0 auto;width: 100%;height: 100%;z-index:999;\"></div>\n</template>\n\n<script>\n  import 'element-ui/lib/theme-chalk/index.css'\n  import {chinaProvider} from 'leaflet.chinatmsproviders'\n  import L from 'leaflet'\n  import 'leaflet.markercluster'\n  // import 'leaflet'\n\n  export default {\n    name: 'gis-information-map',\n    data () {\n      return {\n        heatmapLayer: null,\n        map: null,\n        baseLayers: null,\n        overlays: null,\n        layerControl: null,\n        scenicmapmarkers: null, // 2017国家级风景名胜\n        nation_2016_geology: null, // 2016国家级地质公园\n        nation_2016_woods: null, // 2016国家级森林公园\n        nature_2016: null // 2016国家级自然保护区\n      }\n    },\n    mounted () {\n      this.initmap()\n      this.addscenicmap()\n      this.addnation_2016_geology()\n      this.addnation_2016_woods()\n      this.addnation_2016()\n      this.layercontrol()\n      this.firstmessage()\n    },\n    methods: {\n      initmap: function () {\n        /**\n         * 高德地图\n         */\n        let Gaode = L.tileLayer.chinaProvider('GaoDe.Normal.Map', {\n          attribution: 'Haut-Gis-Org © 高德地图',\n          minZoom: 4\n        })\n        let Gaodimgem = L.tileLayer.chinaProvider('GaoDe.Satellite.Map', {\n          attribution: 'Haut-Gis-Org © 高德地图'\n        })\n        let Gaodimga = L.tileLayer.chinaProvider('GaoDe.Satellite.Annotion', {\n          attribution: 'Haut-Gis-Org © 高德地图'\n        })\n        let Gaodimage = L.layerGroup([Gaodimgem, Gaodimga])\n        // 图层\n        let OpenStreetMap = L.tileLayer(\n          'http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n            attribution: 'Haut-Gis-Org © OpenStreetMap'\n          }\n        )\n        this.baseLayers = {\n          '高德地图': Gaode,\n          '高德影像': Gaodimage,\n          'OpenStreetMap': OpenStreetMap\n        }\n        this.map = L.map('map', {\n          center: [43.912301, 125.323877],\n          zoom: 4,\n          layers: [Gaode]\n        })\n        L.control.scale({ maxWidth: 200, metric: true, imperial: false }).addTo(this.map)\n      },\n      addscenicmap: function () {\n        let that = this\n        this.scenicmapmarkers = L.markerClusterGroup()\n        // 请求调用景点json数据\n        this.$http.get('/api/scenicdata').then(response => {\n          console.log(response)\n          let array = response.data.features\n          let i = 0\n          while (array[i]) {\n            let data = array[i]\n            // console.log(mapinfo)\n            let mgtitle = '【' + data.properties.名称 + '】' + ''\n            let mgcontent = '类型：' + '2017年国家级风景名胜' + '</br>' +\n              '全称：' + data.properties.全称 + '</br>' +\n              '省份：' + data.properties.省份 + '</br>' +\n              '总面积：' + data.properties.总面积 + '平方公里' + '</br>' +\n              '游览面积：' + data.properties.游览面 + '平方公里' + '</br>' +\n              '2017游览量：' + data.properties.游人量 + '万人次' + '</br>' +\n              '境外游人量：' + data.properties.境外游 + '万人次' + '</br>' +\n              '固定资产投资完成额：' + data.properties.固定资 + '万元' + '</br>' +\n              '国家拨款：' + data.properties.国家拨 + '万元' + '</br>' +\n              '景区资金收入合计：' + data.properties.景区资 + '万元' + '</br>' +\n              '景区资金支出合计：' + data.properties.景区资_ + '万元' + '</br>' +\n              '经营收入：' + data.properties.经营收 + '万元' + '</br>' +\n              '经营支出：' + data.properties.经营支 + '万元' + '</br>' +\n              '维护支出：' + data.properties.维护支 + '万元' + '</br>' +\n              '门票收入：' + data.properties.门票收 + '万元' + '</br>' +\n              '注：数据0表示统计信息暂缺' + '</br>'\n            let marker = L.marker(new L.LatLng(data.geometry.coordinates[1], data.geometry.coordinates[0]), { title: '' })\n            // marker.bindPopup(title)\n            // bind event on marker\n            marker.on('click', function (e) {\n              console.log(e)\n              that.openmessage(mgtitle, mgcontent)\n            })\n            this.scenicmapmarkers.addLayer(marker)\n            // marker.on('click', function (e) {\n            //   this.markerclick(e, data)\n            // })\n            i++\n          }\n          this.scenicmapmarkers.addTo(this.map)\n        }, response => {\n          console.log('数据加载失败')\n        })\n      },\n      addnation_2016_geology: function () {\n        let that = this\n        this.nation_2016_geology = L.markerClusterGroup()\n        // 请求调用景点json数据\n        this.$http.get('/api/nation_2016_geology').then(response => {\n          console.log(response)\n          let array = response.data.features\n          let i = 0\n          while (array[i]) {\n            let data = array[i]\n            // console.log(data)\n            let mgtitle = '【' + data.properties.name + '】' + ''\n            let mgcontent = '类型：' + '2016年国家级地址公园' + '</br>' +\n              '主要地质景观：' + data.properties.主要地 + '</br>' +\n              '主要人文景观：' + data.properties.主要人 + '</br>' +\n              '首次设立时间：' + data.properties.time + '</br>' +\n              '批次：' + '第' + data.properties.批次 + '批次' + '</br>' +\n              '序号：' + data.properties.序号 + '</br>' +\n              '注：数据为空表示该数据暂缺' + '</br>'\n            // let title = mapinfo\n            let marker = L.marker(new L.LatLng(data.geometry.coordinates[1], data.geometry.coordinates[0]), { title: '' })\n            marker.on('click', function (e) {\n              console.log(e)\n              that.openmessage(mgtitle, mgcontent)\n            })\n            that.nation_2016_geology.addLayer(marker)\n            i++\n          }\n          // that.nation_2016_geology.addTo(this.map)\n          that.layerControl.addOverlay(that.nation_2016_geology, '2016年国家级地质公园')\n        }, response => {\n          console.log('数据加载失败')\n        })\n      },\n      addnation_2016_woods: function () {\n        let that = this\n        this.nation_2016_woods = L.markerClusterGroup()\n        // 请求调用景点json数据\n        this.$http.get('/api/nation_2016_woods').then(response => {\n          console.log(response)\n          let array = response.data.features\n          let i = 0\n          while (array[i]) {\n            let data = array[i]\n            // console.log(data)\n            let mgtitle = '【' + data.properties.name_short + '】' + ''\n            let mgcontent = '全称：' + data.properties.name + '</br>' +\n              '类型：' + '2016年国家级森林公园' + '</br>' +\n              '面积：' + data.properties.area_ha + '平方公里' + '</br>' +\n              '所在省份：' + data.properties.Province + '</br>' +\n              '监管方：' + data.properties.manager + '</br>' +\n              '所在地：' + '第' + data.properties.county + '</br>' +\n              '首次设立时间：' + data.properties.time + '</br>' +\n              '注：数据为空表示该数据暂缺' + '</br>'\n            // let title = mapinfo\n            let marker = L.marker(new L.LatLng(data.geometry.coordinates[1], data.geometry.coordinates[0]), { title: '' })\n            marker.on('click', function (e) {\n              console.log(e)\n              that.openmessage(mgtitle, mgcontent)\n            })\n            that.nation_2016_woods.addLayer(marker)\n            i++\n          }\n          // that.nation_2016_geology.addTo(this.map)\n          that.layerControl.addOverlay(that.nation_2016_woods, '2016年国家级森林公园')\n        }, response => {\n          console.log('数据加载失败')\n        })\n      },\n      addnation_2016: function () {\n        let that = this\n        this.nation_2016 = L.markerClusterGroup()\n        // 请求调用景点json数据\n        this.$http.get('/api/nature_2016_protect').then(response => {\n          console.log(response)\n          let array = response.data.features\n          let i = 0\n          while (array[i]) {\n            let data = array[i]\n            // console.log(data)\n            let mgtitle = '【' + data.properties.name + '】' + ''\n            let mgcontent = '类型：' + '2016年国家级自然保护区' + '</br>' +\n              '面积：' + data.properties.area + '平方公里' + '</br>' +\n              '所在省份：' + data.properties.Province + '</br>' +\n              '所属部门：' + data.properties.apartment + '</br>' +\n              '编码：' + data.properties.code + '</br>' +\n              '所在地：' + data.properties.county + '</br>' +\n              '类型：' + data.properties.object + '</br>' +\n              '首次设立时间：' + data.properties.time + '</br>' +\n              '保护对象：' + data.properties.type + '</br>' +\n              '注：数据为空表示该数据暂缺' + '</br>'\n            // let title = mapinfo\n            let marker = L.marker(new L.LatLng(data.geometry.coordinates[1], data.geometry.coordinates[0]), { title: '' })\n            marker.on('click', function (e) {\n              console.log(e)\n              that.openmessage(mgtitle, mgcontent)\n            })\n            that.nation_2016.addLayer(marker)\n            i++\n          }\n          // that.nation_2016_geology.addTo(this.map)\n          that.layerControl.addOverlay(that.nation_2016, '2016年国家级自然保护区')\n        }, response => {\n          console.log('数据加载失败')\n        })\n      },\n      layercontrol: function () {\n        // 在这里添加的图层立刻显示\n        let that = this\n        this.overlays = {\n          '2017国家级风景名胜区': this.scenicmapmarkers\n        }\n        that.layerControl = L.control.layers(this.baseLayers, this.overlays).addTo(this.map)\n      },\n      // 居中信息\n      openmessage (title, content) {\n        this.$confirm(content, title, {\n          confirmButtonText: '前往',\n          cancelButtonText: '继续',\n          type: 'warning',\n          center: true,\n          dangerouslyUseHTMLString: true\n        }).then(() => {\n          this.$message({\n            type: 'success',\n            message: '正在前往!'\n          })\n        }).catch(() => {\n          this.$message({\n            type: 'info',\n            message: '继续查看'\n          })\n        })\n      },\n      firstmessage () {\n        let that = this\n        that.$confirm('请使用右上角图层按钮切换信息源，当前地图标记信息为：2017年国家级风景名胜区', '温馨提示', {\n          confirmButtonText: '知道啦！',\n          cancelButtonText: '返回首页',\n          type: 'warning',\n          center: true\n        }).then(() => {\n          that.$message({\n            type: 'success',\n            message: '地图查看!'\n          }).catch(() => {\n            that.$message({\n              type: 'info',\n              message: '前往首页'\n            })\n            that.$router.push({path: '/gis-master-map'})\n          })\n        })\n      }\n      // ,\n      // markerclick: function (e, mapinfo) {\n      //   console.log(e)\n      //   console.log(mapinfo)\n      // }\n    }\n  }\n</script>\n\n<style>\n\n</style>\n\n\n\n// WEBPACK FOOTER //\n// src/pages/gis-information-map.vue","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticStyle:{\"margin\":\"0 auto\",\"width\":\"100%\",\"height\":\"100%\",\"z-index\":\"999\"},attrs:{\"id\":\"map\"}})}\nvar staticRenderFns = []\nvar esExports = { render: render, staticRenderFns: staticRenderFns }\nexport default esExports\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/vue-loader/lib/template-compiler?{\"id\":\"data-v-310d8758\",\"hasScoped\":false,\"transformToRequire\":{\"video\":[\"src\",\"poster\"],\"source\":\"src\",\"img\":\"src\",\"image\":\"xlink:href\"},\"buble\":{\"transforms\":{}}}!./node_modules/vue-loader/lib/selector.js?type=template&index=0!./src/pages/gis-information-map.vue\n// module id = null\n// module chunks = ","function injectStyle (ssrContext) {\n  require(\"!!../../node_modules/extract-text-webpack-plugin/dist/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?{\\\"sourceMap\\\":true}!../../node_modules/vue-loader/lib/style-compiler/index?{\\\"vue\\\":true,\\\"id\\\":\\\"data-v-310d8758\\\",\\\"scoped\\\":false,\\\"hasInlineConfig\\\":false}!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./gis-information-map.vue\")\n}\nvar normalizeComponent = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")\n/* script */\nexport * from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./gis-information-map.vue\"\nimport __vue_script__ from \"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./gis-information-map.vue\"\n/* template */\nimport __vue_template__ from \"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-310d8758\\\",\\\"hasScoped\\\":false,\\\"transformToRequire\\\":{\\\"video\\\":[\\\"src\\\",\\\"poster\\\"],\\\"source\\\":\\\"src\\\",\\\"img\\\":\\\"src\\\",\\\"image\\\":\\\"xlink:href\\\"},\\\"buble\\\":{\\\"transforms\\\":{}}}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./gis-information-map.vue\"\n/* template functional */\nvar __vue_template_functional__ = false\n/* styles */\nvar __vue_styles__ = injectStyle\n/* scopeId */\nvar __vue_scopeId__ = null\n/* moduleIdentifier (server only) */\nvar __vue_module_identifier__ = null\nvar Component = normalizeComponent(\n  __vue_script__,\n  __vue_template__,\n  __vue_template_functional__,\n  __vue_styles__,\n  __vue_scopeId__,\n  __vue_module_identifier__\n)\n\nexport default Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/pages/gis-information-map.vue\n// module id = null\n// module chunks = "],"sourceRoot":""}